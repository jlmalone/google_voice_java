#summary Using Maven to manage project

= Introduction =

The Maven branch provides an example of automating the project build, allowing it to be built outside the Eclipse IDE.

Using Maven removes the need for libraries, Javadocs, and Eclipse files to be in Subversion.<br>
Libraries are managed as dependencies in the project pom.xml, downloaded by Maven to the local repository.<br>
Javadocs can be generated by a Maven plugin goal, see example below.<br>
Eclipse files can be generated by a Maven plugin, see example below, or these are not needed if using m2eclipse.

The project depends on the modified json library (different package name). These source files were added to Subversion.

The current branch represents the fewest changes to the codebase with more extensive changes described in the future steps below.

The Maven pom contains project metadata, including the version. For the branch, the working version is assumed to be 2.0 and since it is under development (non-release) the -SNAPSHOT qualifier is included (2.0-SNAPSHOT).

The scm urls in the pom point to the trunk location in Subversion, instead of the Maven branch location.

The end of the pom includes a profile for possibly deploying the released project artifacts to the Sonatype Maven repository and Maven central repository.

= Command Line Goals =

These goals require [http://www.oracle.com/technetwork/java/javase/downloads/index.html Java JDK6] and [http://maven.apache.org/download.html Maven] (2.2.1 used here) to be installed.<br>
As specified by the Maven README, the JAVA_HOME environment variable is expected to be set to the JDK location, <br>
and the PATH environment variable is expected to include the Maven bin directory.

Run the following commands from the project base directory, containing the pom.xml

Build the project:
  * Run: mvn clean install
  * The built jar is located at target/google-voice-java-2.0-SNAPSHOT.jar

Generate Javadocs:
  * Run: mvn javadoc:javadoc
  * The generated HTML files are located at target/site/apidocs

Generate Eclipse project:
  * Run: mvn eclipse:configure-workspace -Declipse.workspace=/path/to/workspace
  * Run: mvn eclipse:eclipse
  * The .project and .classpath files are generated
  * Each time the pom dependencies are changed, these can be updated running eclipse:eclipse

= Future Steps =
  * Remove lib and doc directories
  * Remove .project and .classpath files
  * Use Maven convention for source directory:
    * The src directory could be changed to src/main/java
    * The source directory build property in the pom.xml can be removed
  * The google-voice and json libraries can be separated:
    * Change to multi-module project
    * Change existing pom to parent pom
    * Move json classes to new module directory with pom.xml
    * Move google-voice classes to new module directory with pom.xml, with dependency on json module
    * Separate jars are built for json and google-voice
  * Trim dependencies if needed:
    * Maven brings in transitive dependencies (icu4j, jdom, xalan, xercesImpl, xml-apis, xmlParserAPIs, xom)
    * Unnecessary dependencies can be excluded
  * Cleanup existing test:
    * The test directory could be moved to src/test/java and src/test/resources
    * The test class name could be changed to ManualVoiceTest, excluded from build testing as necessary
    * The test class package could be changed to com.techventus.server.voice
  * Add junit tests to src/test/java and junit test dependency to pom.xml